package com.gosoft.gobtp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ChantierAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChantierAllPropertiesEquals(Chantier expected, Chantier actual) {
        assertChantierAutoGeneratedPropertiesEquals(expected, actual);
        assertChantierAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChantierAllUpdatablePropertiesEquals(Chantier expected, Chantier actual) {
        assertChantierUpdatableFieldsEquals(expected, actual);
        assertChantierUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChantierAutoGeneratedPropertiesEquals(Chantier expected, Chantier actual) {
        assertThat(expected)
            .as("Verify Chantier auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChantierUpdatableFieldsEquals(Chantier expected, Chantier actual) {
        assertThat(expected)
            .as("Verify Chantier relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getAdresse()).as("check adresse").isEqualTo(actual.getAdresse()))
            .satisfies(e -> assertThat(e.getDesc()).as("check desc").isEqualTo(actual.getDesc()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChantierUpdatableRelationshipsEquals(Chantier expected, Chantier actual) {
        assertThat(expected)
            .as("Verify Chantier relationships")
            .satisfies(e -> assertThat(e.getOuvriers()).as("check ouvriers").isEqualTo(actual.getOuvriers()))
            .satisfies(e -> assertThat(e.getChefChantier()).as("check chefChantier").isEqualTo(actual.getChefChantier()))
            .satisfies(e -> assertThat(e.getClient()).as("check client").isEqualTo(actual.getClient()));
    }
}
