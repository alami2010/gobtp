package com.gosoft.gobtp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ChefChantierAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChefChantierAllPropertiesEquals(ChefChantier expected, ChefChantier actual) {
        assertChefChantierAutoGeneratedPropertiesEquals(expected, actual);
        assertChefChantierAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChefChantierAllUpdatablePropertiesEquals(ChefChantier expected, ChefChantier actual) {
        assertChefChantierUpdatableFieldsEquals(expected, actual);
        assertChefChantierUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the derived primary key is set correctly.
     *
     * @param entityToPersist the entity used to persist
     * @param persisted the persisted entity
     */
    public static void assertChefChantierMapsIdRelationshipPersistedValue(ChefChantier entityToPersist, ChefChantier persisted) {
        // Validate the id for MapsId, the ids must be same
        assertThat(entityToPersist.getInternalUser().getId()).isEqualTo(persisted.getId());
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChefChantierAutoGeneratedPropertiesEquals(ChefChantier expected, ChefChantier actual) {
        assertThat(expected)
            .as("Verify ChefChantier auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChefChantierUpdatableFieldsEquals(ChefChantier expected, ChefChantier actual) {
        assertThat(expected)
            .as("Verify ChefChantier relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getPhone()).as("check phone").isEqualTo(actual.getPhone()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChefChantierUpdatableRelationshipsEquals(ChefChantier expected, ChefChantier actual) {
        // empty method
    }
}
